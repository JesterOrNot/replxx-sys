/* automatically generated by rust-bindgen */

pub const REPLXX_VERSION: &'static [u8; 6usize] = b"0.0.2\0";
pub const REPLXX_VERSION_MAJOR: u32 = 0;
pub const REPLXX_VERSION_MINOR: u32 = 0;
pub const ReplxxColor_REPLXX_COLOR_BLACK: ReplxxColor = 0;
pub const ReplxxColor_REPLXX_COLOR_RED: ReplxxColor = 1;
pub const ReplxxColor_REPLXX_COLOR_GREEN: ReplxxColor = 2;
pub const ReplxxColor_REPLXX_COLOR_BROWN: ReplxxColor = 3;
pub const ReplxxColor_REPLXX_COLOR_BLUE: ReplxxColor = 4;
pub const ReplxxColor_REPLXX_COLOR_MAGENTA: ReplxxColor = 5;
pub const ReplxxColor_REPLXX_COLOR_CYAN: ReplxxColor = 6;
pub const ReplxxColor_REPLXX_COLOR_LIGHTGRAY: ReplxxColor = 7;
pub const ReplxxColor_REPLXX_COLOR_GRAY: ReplxxColor = 8;
pub const ReplxxColor_REPLXX_COLOR_BRIGHTRED: ReplxxColor = 9;
pub const ReplxxColor_REPLXX_COLOR_BRIGHTGREEN: ReplxxColor = 10;
pub const ReplxxColor_REPLXX_COLOR_YELLOW: ReplxxColor = 11;
pub const ReplxxColor_REPLXX_COLOR_BRIGHTBLUE: ReplxxColor = 12;
pub const ReplxxColor_REPLXX_COLOR_BRIGHTMAGENTA: ReplxxColor = 13;
pub const ReplxxColor_REPLXX_COLOR_BRIGHTCYAN: ReplxxColor = 14;
pub const ReplxxColor_REPLXX_COLOR_WHITE: ReplxxColor = 15;
pub const ReplxxColor_REPLXX_COLOR_NORMAL: ReplxxColor = 7;
pub const ReplxxColor_REPLXX_COLOR_DEFAULT: ReplxxColor = -1;
pub const ReplxxColor_REPLXX_COLOR_ERROR: ReplxxColor = -2;
pub type ReplxxColor = i32;
pub const REPLXX_KEY_BASE: _bindgen_ty_1 = 1114112;
pub type _bindgen_ty_1 = u32;
pub const REPLXX_KEY_BASE_SHIFT: _bindgen_ty_2 = 16777216;
pub type _bindgen_ty_2 = u32;
pub const REPLXX_KEY_BASE_CONTROL: _bindgen_ty_3 = 33554432;
pub type _bindgen_ty_3 = u32;
pub const REPLXX_KEY_BASE_META: _bindgen_ty_4 = 67108864;
pub type _bindgen_ty_4 = u32;
pub const REPLXX_KEY_ESCAPE: _bindgen_ty_5 = 27;
pub type _bindgen_ty_5 = u32;
pub const REPLXX_KEY_PAGE_UP: _bindgen_ty_6 = 1114113;
pub type _bindgen_ty_6 = u32;
pub const REPLXX_KEY_PAGE_DOWN: _bindgen_ty_7 = 1114114;
pub type _bindgen_ty_7 = u32;
pub const REPLXX_KEY_DOWN: _bindgen_ty_8 = 1114115;
pub type _bindgen_ty_8 = u32;
pub const REPLXX_KEY_UP: _bindgen_ty_9 = 1114116;
pub type _bindgen_ty_9 = u32;
pub const REPLXX_KEY_LEFT: _bindgen_ty_10 = 1114117;
pub type _bindgen_ty_10 = u32;
pub const REPLXX_KEY_RIGHT: _bindgen_ty_11 = 1114118;
pub type _bindgen_ty_11 = u32;
pub const REPLXX_KEY_HOME: _bindgen_ty_12 = 1114119;
pub type _bindgen_ty_12 = u32;
pub const REPLXX_KEY_END: _bindgen_ty_13 = 1114120;
pub type _bindgen_ty_13 = u32;
pub const REPLXX_KEY_DELETE: _bindgen_ty_14 = 1114121;
pub type _bindgen_ty_14 = u32;
pub const REPLXX_KEY_INSERT: _bindgen_ty_15 = 1114122;
pub type _bindgen_ty_15 = u32;
pub const REPLXX_KEY_F1: _bindgen_ty_16 = 1114123;
pub type _bindgen_ty_16 = u32;
pub const REPLXX_KEY_F2: _bindgen_ty_17 = 1114124;
pub type _bindgen_ty_17 = u32;
pub const REPLXX_KEY_F3: _bindgen_ty_18 = 1114125;
pub type _bindgen_ty_18 = u32;
pub const REPLXX_KEY_F4: _bindgen_ty_19 = 1114126;
pub type _bindgen_ty_19 = u32;
pub const REPLXX_KEY_F5: _bindgen_ty_20 = 1114127;
pub type _bindgen_ty_20 = u32;
pub const REPLXX_KEY_F6: _bindgen_ty_21 = 1114128;
pub type _bindgen_ty_21 = u32;
pub const REPLXX_KEY_F7: _bindgen_ty_22 = 1114129;
pub type _bindgen_ty_22 = u32;
pub const REPLXX_KEY_F8: _bindgen_ty_23 = 1114130;
pub type _bindgen_ty_23 = u32;
pub const REPLXX_KEY_F9: _bindgen_ty_24 = 1114131;
pub type _bindgen_ty_24 = u32;
pub const REPLXX_KEY_F10: _bindgen_ty_25 = 1114132;
pub type _bindgen_ty_25 = u32;
pub const REPLXX_KEY_F11: _bindgen_ty_26 = 1114133;
pub type _bindgen_ty_26 = u32;
pub const REPLXX_KEY_F12: _bindgen_ty_27 = 1114134;
pub type _bindgen_ty_27 = u32;
pub const REPLXX_KEY_F13: _bindgen_ty_28 = 1114135;
pub type _bindgen_ty_28 = u32;
pub const REPLXX_KEY_F14: _bindgen_ty_29 = 1114136;
pub type _bindgen_ty_29 = u32;
pub const REPLXX_KEY_F15: _bindgen_ty_30 = 1114137;
pub type _bindgen_ty_30 = u32;
pub const REPLXX_KEY_F16: _bindgen_ty_31 = 1114138;
pub type _bindgen_ty_31 = u32;
pub const REPLXX_KEY_F17: _bindgen_ty_32 = 1114139;
pub type _bindgen_ty_32 = u32;
pub const REPLXX_KEY_F18: _bindgen_ty_33 = 1114140;
pub type _bindgen_ty_33 = u32;
pub const REPLXX_KEY_F19: _bindgen_ty_34 = 1114141;
pub type _bindgen_ty_34 = u32;
pub const REPLXX_KEY_F20: _bindgen_ty_35 = 1114142;
pub type _bindgen_ty_35 = u32;
pub const REPLXX_KEY_F21: _bindgen_ty_36 = 1114143;
pub type _bindgen_ty_36 = u32;
pub const REPLXX_KEY_F22: _bindgen_ty_37 = 1114144;
pub type _bindgen_ty_37 = u32;
pub const REPLXX_KEY_F23: _bindgen_ty_38 = 1114145;
pub type _bindgen_ty_38 = u32;
pub const REPLXX_KEY_F24: _bindgen_ty_39 = 1114146;
pub type _bindgen_ty_39 = u32;
pub const REPLXX_KEY_MOUSE: _bindgen_ty_40 = 1114147;
pub type _bindgen_ty_40 = u32;
pub const REPLXX_KEY_PASTE_START: _bindgen_ty_41 = 1114148;
pub type _bindgen_ty_41 = u32;
pub const REPLXX_KEY_PASTE_FINISH: _bindgen_ty_42 = 1114149;
pub type _bindgen_ty_42 = u32;
pub const REPLXX_KEY_BACKSPACE: _bindgen_ty_43 = 33554504;
pub type _bindgen_ty_43 = u32;
pub const REPLXX_KEY_TAB: _bindgen_ty_44 = 33554505;
pub type _bindgen_ty_44 = u32;
pub const REPLXX_KEY_ENTER: _bindgen_ty_45 = 33554509;
pub type _bindgen_ty_45 = u32;
pub const ReplxxAction_REPLXX_ACTION_INSERT_CHARACTER: ReplxxAction = 0;
pub const ReplxxAction_REPLXX_ACTION_DELETE_CHARACTER_UNDER_CURSOR: ReplxxAction = 1;
pub const ReplxxAction_REPLXX_ACTION_DELETE_CHARACTER_LEFT_OF_CURSOR: ReplxxAction = 2;
pub const ReplxxAction_REPLXX_ACTION_KILL_TO_END_OF_LINE: ReplxxAction = 3;
pub const ReplxxAction_REPLXX_ACTION_KILL_TO_BEGINING_OF_LINE: ReplxxAction = 4;
pub const ReplxxAction_REPLXX_ACTION_KILL_TO_END_OF_WORD: ReplxxAction = 5;
pub const ReplxxAction_REPLXX_ACTION_KILL_TO_BEGINING_OF_WORD: ReplxxAction = 6;
pub const ReplxxAction_REPLXX_ACTION_KILL_TO_WHITESPACE_ON_LEFT: ReplxxAction = 7;
pub const ReplxxAction_REPLXX_ACTION_YANK: ReplxxAction = 8;
pub const ReplxxAction_REPLXX_ACTION_YANK_CYCLE: ReplxxAction = 9;
pub const ReplxxAction_REPLXX_ACTION_YANK_LAST_ARG: ReplxxAction = 10;
pub const ReplxxAction_REPLXX_ACTION_MOVE_CURSOR_TO_BEGINING_OF_LINE: ReplxxAction = 11;
pub const ReplxxAction_REPLXX_ACTION_MOVE_CURSOR_TO_END_OF_LINE: ReplxxAction = 12;
pub const ReplxxAction_REPLXX_ACTION_MOVE_CURSOR_ONE_WORD_LEFT: ReplxxAction = 13;
pub const ReplxxAction_REPLXX_ACTION_MOVE_CURSOR_ONE_WORD_RIGHT: ReplxxAction = 14;
pub const ReplxxAction_REPLXX_ACTION_MOVE_CURSOR_LEFT: ReplxxAction = 15;
pub const ReplxxAction_REPLXX_ACTION_MOVE_CURSOR_RIGHT: ReplxxAction = 16;
pub const ReplxxAction_REPLXX_ACTION_HISTORY_NEXT: ReplxxAction = 17;
pub const ReplxxAction_REPLXX_ACTION_HISTORY_PREVIOUS: ReplxxAction = 18;
pub const ReplxxAction_REPLXX_ACTION_HISTORY_FIRST: ReplxxAction = 19;
pub const ReplxxAction_REPLXX_ACTION_HISTORY_LAST: ReplxxAction = 20;
pub const ReplxxAction_REPLXX_ACTION_HISTORY_INCREMENTAL_SEARCH: ReplxxAction = 21;
pub const ReplxxAction_REPLXX_ACTION_HISTORY_COMMON_PREFIX_SEARCH: ReplxxAction = 22;
pub const ReplxxAction_REPLXX_ACTION_HINT_NEXT: ReplxxAction = 23;
pub const ReplxxAction_REPLXX_ACTION_HINT_PREVIOUS: ReplxxAction = 24;
pub const ReplxxAction_REPLXX_ACTION_CAPITALIZE_WORD: ReplxxAction = 25;
pub const ReplxxAction_REPLXX_ACTION_LOWERCASE_WORD: ReplxxAction = 26;
pub const ReplxxAction_REPLXX_ACTION_UPPERCASE_WORD: ReplxxAction = 27;
pub const ReplxxAction_REPLXX_ACTION_TRANSPOSE_CHARACTERS: ReplxxAction = 28;
pub const ReplxxAction_REPLXX_ACTION_TOGGLE_OVERWRITE_MODE: ReplxxAction = 29;
pub const ReplxxAction_REPLXX_ACTION_VERBATIM_INSERT: ReplxxAction = 30;
pub const ReplxxAction_REPLXX_ACTION_SUSPEND: ReplxxAction = 31;
pub const ReplxxAction_REPLXX_ACTION_BRACKETED_PASTE: ReplxxAction = 32;
pub const ReplxxAction_REPLXX_ACTION_CLEAR_SCREEN: ReplxxAction = 33;
pub const ReplxxAction_REPLXX_ACTION_CLEAR_SELF: ReplxxAction = 34;
pub const ReplxxAction_REPLXX_ACTION_REPAINT: ReplxxAction = 35;
pub const ReplxxAction_REPLXX_ACTION_COMPLETE_LINE: ReplxxAction = 36;
pub const ReplxxAction_REPLXX_ACTION_COMPLETE_NEXT: ReplxxAction = 37;
pub const ReplxxAction_REPLXX_ACTION_COMPLETE_PREVIOUS: ReplxxAction = 38;
pub const ReplxxAction_REPLXX_ACTION_COMMIT_LINE: ReplxxAction = 39;
pub const ReplxxAction_REPLXX_ACTION_ABORT_LINE: ReplxxAction = 40;
pub const ReplxxAction_REPLXX_ACTION_SEND_EOF: ReplxxAction = 41;
pub type ReplxxAction = u32;
pub const ReplxxActionResult_REPLXX_ACTION_RESULT_CONTINUE: ReplxxActionResult = 0;
pub const ReplxxActionResult_REPLXX_ACTION_RESULT_RETURN: ReplxxActionResult = 1;
pub const ReplxxActionResult_REPLXX_ACTION_RESULT_BAIL: ReplxxActionResult = 2;
pub type ReplxxActionResult = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReplxxStateTag {
    pub text: *const ::std::os::raw::c_char,
    pub cursorPosition: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ReplxxStateTag() {
    assert_eq!(
        ::std::mem::size_of::<ReplxxStateTag>(),
        16usize,
        concat!("Size of: ", stringify!(ReplxxStateTag))
    );
    assert_eq!(
        ::std::mem::align_of::<ReplxxStateTag>(),
        8usize,
        concat!("Alignment of ", stringify!(ReplxxStateTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplxxStateTag>())).text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplxxStateTag),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplxxStateTag>())).cursorPosition as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplxxStateTag),
            "::",
            stringify!(cursorPosition)
        )
    );
}
pub type ReplxxState = ReplxxStateTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Replxx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReplxxHistoryScan {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReplxxHistoryEntryTag {
    pub timestamp: *const ::std::os::raw::c_char,
    pub text: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ReplxxHistoryEntryTag() {
    assert_eq!(
        ::std::mem::size_of::<ReplxxHistoryEntryTag>(),
        16usize,
        concat!("Size of: ", stringify!(ReplxxHistoryEntryTag))
    );
    assert_eq!(
        ::std::mem::align_of::<ReplxxHistoryEntryTag>(),
        8usize,
        concat!("Alignment of ", stringify!(ReplxxHistoryEntryTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplxxHistoryEntryTag>())).timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplxxHistoryEntryTag),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplxxHistoryEntryTag>())).text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplxxHistoryEntryTag),
            "::",
            stringify!(text)
        )
    );
}
pub type ReplxxHistoryEntry = ReplxxHistoryEntryTag;
extern "C" {
    pub fn replxx_init() -> *mut Replxx;
}
extern "C" {
    pub fn replxx_end(replxx: *mut Replxx);
}
pub type replxx_modify_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        input: *mut *mut ::std::os::raw::c_char,
        contextLen: *mut ::std::os::raw::c_int,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn replxx_set_modify_callback(
        arg1: *mut Replxx,
        fn_: replxx_modify_callback_t,
        userData: *mut ::std::os::raw::c_void,
    );
}
pub type replxx_highlighter_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        input: *const ::std::os::raw::c_char,
        colors: *mut ReplxxColor,
        size: ::std::os::raw::c_int,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn replxx_set_highlighter_callback(
        arg1: *mut Replxx,
        fn_: replxx_highlighter_callback_t,
        userData: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct replxx_completions {
    _unused: [u8; 0],
}
pub type replxx_completion_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        input: *const ::std::os::raw::c_char,
        completions: *mut replxx_completions,
        contextLen: *mut ::std::os::raw::c_int,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn replxx_set_completion_callback(
        arg1: *mut Replxx,
        fn_: replxx_completion_callback_t,
        userData: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn replxx_add_completion(
        completions: *mut replxx_completions,
        str: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn replxx_add_color_completion(
        completions: *mut replxx_completions,
        str: *const ::std::os::raw::c_char,
        color: ReplxxColor,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct replxx_hints {
    _unused: [u8; 0],
}
pub type replxx_hint_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        input: *const ::std::os::raw::c_char,
        hints: *mut replxx_hints,
        contextLen: *mut ::std::os::raw::c_int,
        color: *mut ReplxxColor,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn replxx_set_hint_callback(
        arg1: *mut Replxx,
        fn_: replxx_hint_callback_t,
        userData: *mut ::std::os::raw::c_void,
    );
}
pub type key_press_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        code: ::std::os::raw::c_int,
        userData: *mut ::std::os::raw::c_void,
    ) -> ReplxxActionResult,
>;
extern "C" {
    pub fn replxx_add_hint(hints: *mut replxx_hints, str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn replxx_input(
        arg1: *mut Replxx,
        prompt: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn replxx_get_state(arg1: *mut Replxx, state: *mut ReplxxState);
}
extern "C" {
    pub fn replxx_set_state(arg1: *mut Replxx, state: *mut ReplxxState);
}
extern "C" {
    pub fn replxx_print(
        arg1: *mut Replxx,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn replxx_emulate_key_press(arg1: *mut Replxx, code: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn replxx_invoke(
        arg1: *mut Replxx,
        action: ReplxxAction,
        code: ::std::os::raw::c_uint,
    ) -> ReplxxActionResult;
}
extern "C" {
    pub fn replxx_bind_key(
        arg1: *mut Replxx,
        code: ::std::os::raw::c_int,
        handler: key_press_handler_t,
        userData: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn replxx_set_preload_buffer(arg1: *mut Replxx, preloadText: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn replxx_history_add(arg1: *mut Replxx, line: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn replxx_history_size(arg1: *mut Replxx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn replxx_set_word_break_characters(
        arg1: *mut Replxx,
        wordBreakers: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn replxx_set_completion_count_cutoff(arg1: *mut Replxx, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_max_hint_rows(arg1: *mut Replxx, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_hint_delay(arg1: *mut Replxx, milliseconds: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_double_tab_completion(arg1: *mut Replxx, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_complete_on_empty(arg1: *mut Replxx, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_beep_on_ambiguous_completion(arg1: *mut Replxx, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_immediate_completion(arg1: *mut Replxx, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_unique_history(arg1: *mut Replxx, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_no_color(arg1: *mut Replxx, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_set_max_history_size(arg1: *mut Replxx, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replxx_history_scan_start(arg1: *mut Replxx) -> *mut ReplxxHistoryScan;
}
extern "C" {
    pub fn replxx_history_scan_stop(arg1: *mut Replxx, arg2: *mut ReplxxHistoryScan);
}
extern "C" {
    pub fn replxx_history_scan_next(
        arg1: *mut Replxx,
        arg2: *mut ReplxxHistoryScan,
        arg3: *mut ReplxxHistoryEntry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn replxx_history_save(arg1: *mut Replxx, filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn replxx_history_load(arg1: *mut Replxx, filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn replxx_history_clear(arg1: *mut Replxx);
}
extern "C" {
    pub fn replxx_clear_screen(arg1: *mut Replxx);
}
extern "C" {
    pub fn replxx_install_window_change_handler(arg1: *mut Replxx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn replxx_enable_bracketed_paste(arg1: *mut Replxx);
}
